/*
Package model GENERATED BY gengo:table
DON'T EDIT THIS FILE
*/
package model

import (
	sqlbuilder "github.com/octohelm/storage/pkg/sqlbuilder"
	modelscoped "github.com/octohelm/storage/pkg/sqlbuilder/modelscoped"
)

func (Org) TableName() string {
	return "t_org"
}

func (Org) PrimaryKey() []string {
	return []string{
		"ID",
	}
}

func (Org) UniqueIndexes() sqlbuilder.Indexes {
	return sqlbuilder.Indexes{
		"i_name": []string{
			"Name",
		},
	}
}

func (Org) Indexes() sqlbuilder.Indexes {
	return sqlbuilder.Indexes{
		"i_created_at": []string{
			"CreatedAt",
		},
	}
}

func (Org) GetKind() string {
	return "Org"
}

func (tableOrg) New() sqlbuilder.Model {
	return &Org{}
}

type tableOrg struct {
	modelscoped.Table[Org]

	I indexesOfOrg

	ID modelscoped.TypedColumn[Org, OrgID]

	Name modelscoped.TypedColumn[Org, string]

	CreatedAt modelscoped.TypedColumn[Org, Datetime]

	UpdatedAt modelscoped.TypedColumn[Org, int64]

	DeletedAt modelscoped.TypedColumn[Org, int64]
}

type indexesOfOrg struct {
	Primary modelscoped.Key[Org]
	IName   modelscoped.Key[Org]
}

var OrgT = &tableOrg{
	Table: modelscoped.FromModel[Org](),

	ID:        modelscoped.CastTypedColumn[Org, OrgID](modelscoped.FromModel[Org]().F("ID")),
	Name:      modelscoped.CastTypedColumn[Org, string](modelscoped.FromModel[Org]().F("Name")),
	CreatedAt: modelscoped.CastTypedColumn[Org, Datetime](modelscoped.FromModel[Org]().F("CreatedAt")),
	UpdatedAt: modelscoped.CastTypedColumn[Org, int64](modelscoped.FromModel[Org]().F("UpdatedAt")),
	DeletedAt: modelscoped.CastTypedColumn[Org, int64](modelscoped.FromModel[Org]().F("DeletedAt")),

	I: indexesOfOrg{
		Primary: modelscoped.FromModel[Org]().MK("primary"),
		IName:   modelscoped.FromModel[Org]().MK("i_name"),
	},
}

func (OrgUser) TableName() string {
	return "t_org_user"
}

func (OrgUser) PrimaryKey() []string {
	return []string{
		"ID",
	}
}

func (OrgUser) UniqueIndexes() sqlbuilder.Indexes {
	return sqlbuilder.Indexes{
		"i_org_usr": []string{
			"UserID",
			"OrgID",
		},
	}
}

func (OrgUser) GetKind() string {
	return "OrgUser"
}

func (tableOrgUser) New() sqlbuilder.Model {
	return &OrgUser{}
}

type tableOrgUser struct {
	modelscoped.Table[OrgUser]

	I indexesOfOrgUser

	ID modelscoped.TypedColumn[OrgUser, uint64]

	UserID modelscoped.TypedColumn[OrgUser, UserID]

	OrgID modelscoped.TypedColumn[OrgUser, OrgID]
}

type indexesOfOrgUser struct {
	Primary modelscoped.Key[OrgUser]
	IOrgUsr modelscoped.Key[OrgUser]
}

var OrgUserT = &tableOrgUser{
	Table: modelscoped.FromModel[OrgUser](),

	ID:     modelscoped.CastTypedColumn[OrgUser, uint64](modelscoped.FromModel[OrgUser]().F("ID")),
	UserID: modelscoped.CastTypedColumn[OrgUser, UserID](modelscoped.FromModel[OrgUser]().F("UserID")),
	OrgID:  modelscoped.CastTypedColumn[OrgUser, OrgID](modelscoped.FromModel[OrgUser]().F("OrgID")),

	I: indexesOfOrgUser{
		Primary: modelscoped.FromModel[OrgUser]().MK("primary"),
		IOrgUsr: modelscoped.FromModel[OrgUser]().MK("i_org_usr"),
	},
}

func (User) TableName() string {
	return "t_user"
}

func (User) PrimaryKey() []string {
	return []string{
		"ID",
	}
}

func (User) UniqueIndexes() sqlbuilder.Indexes {
	return sqlbuilder.Indexes{
		"i_age": []string{
			"Age",
			"DeletedAt",
		},
		"i_name": []string{
			"Name",
			"DeletedAt",
		},
	}
}

func (User) Indexes() sqlbuilder.Indexes {
	return sqlbuilder.Indexes{
		"i_created_at": []string{
			"CreatedAt,desc",
		},
		"i_nickname": []string{
			"Nickname",
		},
	}
}

func (User) GetKind() string {
	return "User"
}

func (tableUser) New() sqlbuilder.Model {
	return &User{}
}

type tableUser struct {
	modelscoped.Table[User]

	I indexesOfUser

	// 用户ID
	ID modelscoped.TypedColumn[User, UserID]
	// 姓名
	Name modelscoped.TypedColumn[User, string]
	// 昵称
	Nickname modelscoped.TypedColumn[User, string]
	// 用户名
	Username modelscoped.TypedColumn[User, string]
	// 性别
	Gender modelscoped.TypedColumn[User, Gender]
	// 年龄
	Age modelscoped.TypedColumn[User, int64]

	CreatedAt modelscoped.TypedColumn[User, Datetime]

	UpdatedAt modelscoped.TypedColumn[User, int64]

	DeletedAt modelscoped.TypedColumn[User, int64]
}

type indexesOfUser struct {
	Primary modelscoped.Key[User]
	IName   modelscoped.Key[User]
	IAge    modelscoped.Key[User]
}

var UserT = &tableUser{
	Table: modelscoped.FromModel[User](),

	ID:        modelscoped.CastTypedColumn[User, UserID](modelscoped.FromModel[User]().F("ID")),
	Name:      modelscoped.CastTypedColumn[User, string](modelscoped.FromModel[User]().F("Name")),
	Nickname:  modelscoped.CastTypedColumn[User, string](modelscoped.FromModel[User]().F("Nickname")),
	Username:  modelscoped.CastTypedColumn[User, string](modelscoped.FromModel[User]().F("Username")),
	Gender:    modelscoped.CastTypedColumn[User, Gender](modelscoped.FromModel[User]().F("Gender")),
	Age:       modelscoped.CastTypedColumn[User, int64](modelscoped.FromModel[User]().F("Age")),
	CreatedAt: modelscoped.CastTypedColumn[User, Datetime](modelscoped.FromModel[User]().F("CreatedAt")),
	UpdatedAt: modelscoped.CastTypedColumn[User, int64](modelscoped.FromModel[User]().F("UpdatedAt")),
	DeletedAt: modelscoped.CastTypedColumn[User, int64](modelscoped.FromModel[User]().F("DeletedAt")),

	I: indexesOfUser{
		Primary: modelscoped.FromModel[User]().MK("primary"),
		IName:   modelscoped.FromModel[User]().MK("i_name"),
		IAge:    modelscoped.FromModel[User]().MK("i_age"),
	},
}
