/*
Package model GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package model

func (*Gender) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (*GenderExt) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *OperateTime) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "CreatedAt":
			return []string{}, true
		case "UpdatedAt":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *OperateTimeWithDeleted) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "DeletedAt":
			return []string{}, true
		}
		if doc, ok := runtimeDoc(&v.OperateTime, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *Org) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ID":
			return []string{}, true
		case "Name":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(&v.OperateTimeWithDeleted, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (*OrgID) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *OrgUser) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ID":
			return []string{}, true
		case "UserID":
			return []string{}, true
		case "OrgID":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *User) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Name":
			return []string{
				"姓名",
			}, true
		case "Nickname":
			return []string{
				"昵称",
			}, true
		case "Username":
			return []string{
				"用户名",
			}, true
		case "Gender":
			return []string{
				"性别",
			}, true
		case "Age":
			return []string{
				"年龄",
			}, true

		}
		if doc, ok := runtimeDoc(&v.Resource, "用户", names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(&v.OperateTimeWithDeleted, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (*UserID) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *UserV2) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ID":
			return []string{}, true
		case "Nickname":
			return []string{}, true
		case "Gender":
			return []string{}, true
		case "Name":
			return []string{}, true
		case "RealName":
			return []string{}, true
		case "Age":
			return []string{
				"for modify testing",
			}, true
		case "Username":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}
