/*
Package filter GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package filter

func (v *OrgByCreatedAt) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "CreatedAt":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *OrgByID) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ID":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *OrgByName) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Name":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *OrgUserByID) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ID":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *OrgUserByOrgID) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "OrgID":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *OrgUserByUserID) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "UserID":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *UserByAge) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Age":
			return []string{
				"通过 年龄 筛选",
			}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *UserByCreatedAt) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "CreatedAt":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *UserByDeletedAt) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "DeletedAt":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *UserByID) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ID":
			return []string{
				"通过 用户ID 筛选",
			}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *UserByName) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Name":
			return []string{
				"通过 姓名 筛选",
			}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *UserByNickname) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Nickname":
			return []string{
				"通过 昵称 筛选",
			}, true
		}

		return nil, false
	}
	return []string{}, true
}

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}
